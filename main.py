import telebot
import os
import ejson
import time
import random
import math
import speech_recognition as sr
import soundfile as sf
#os.chdir("/home/cyborgkiller")
users = ejson.Json("users.json")
bot = telebot.TeleBot("5710456111:AAFMD74M2AdZOxv1pKBmVDQL_ZFyuekwl00")
pings = users["pingoff"]["users"]
PI = math.pi
version = "v0.9.1-vt.ck_jenya"
def sin(i):
    return math.sin(math.radians(i))
def cos(i):
    return math.cos(math.radians(i))
def tg(i):
    return math.tag(math.radians(i))
def asin(i):
    return math.degrees(math.asin(i))
def acos(i):
    return math.degrees(math.acos(i))
def atg(i):
    return math.degrees(math.atag(i))
def ceil(i):
    return math.ceil(i)
def sqrt(i):
    return math.sqrt(i)
@bot.message_handler(commands=['ping_off'])
def ping_off(message):
        pings.append(message.from_user.username)
        users.update()
        bot.reply_to(message, "–ü—ñ–Ω–≥–∏: –≤–∏–º–∫–Ω–µ–Ω—ñ. –í–∏ —Ç–æ–π –∫–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –Ω–∞–∑–∏–≤–∞—Ç–∏!")
@bot.message_handler(commands=['ping_on'])
def ping_on(message):
        if message.from_user.username in users['admins'] or True:
            pings.remove(message.from_user.username)
            users.update()
            bot.reply_to(message, "–ü—ñ–Ω–≥–∏: —É–≤—ñ–º–∫–Ω–µ–Ω—ñ. –í–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ —Å–≤–æ—é –≤–ª–∞–¥—É!")
        else:
            bot.reply_to(message, "–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
@bot.message_handler(commands=["about"])
def profile(message):
    bot.reply_to(message, f"–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ @vladtopordev\n–î–æ–ø–æ–º–æ–≥–ª–∏: @NickTel, @parameterlovervexik\n–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: https://t.me/cyborg_killerbot\n–í–µ—Ä—Å—ñ—è: {version}")

@bot.message_handler(func=lambda m: True)
def handler(message):
    users["ids"][message.from_user.username] = message.from_user.id
    try:
        users["stats"]["msg"][message.from_user.username] += 1
    except:
        users["stats"]["msg"][message.from_user.username] = 1
    users.update()
    if message.text.startswith("/unmute "):
        if message.from_user.username in users['admins'] or "vladtopordev" in message.text:

            args = message.text.split(" ")
            bot.restrict_chat_member(message.chat.id, int(users["ids"][args[1]]), until_date=time.time()+35)
            bot.reply_to(message, "–í–∏ –¥–æ–±—Ä–∞ –ª—é–¥–∏–Ω–∞!")

        else:
            bot.reply_to(message, "–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
    elif message.text.startswith("/stats"):
        bot.reply_to(message, f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {users['stats']['msg'][message.from_user.username]}")
    elif message.text.startswith("/kick "):
        if message.from_user.username in users['admins']:
            args = message.text.split(" ")
            if args[1] == "vladtopordev":
                return
            bot.ban_chat_member(message.chat.id, int(users["ids"][args[1]]))
            bot.unban_chat_member(message.chat.id, int(users["ids"][args[1]]))
    elif message.text.startswith("/ban"):
        if message.from_user.username in users['admins']:
            args = message.text.split(" ")
            if args[1] == "vladtopordev":
                return
            bot.ban_chat_member(message.chat.id, int(users["ids"][args[1]]))
    elif message.text.startswith("/unban"):
        if message.from_user.username in users['admins']:
            args = message.text.split(" ")
            if args[1] == "vladtopordev":
                return
            bot.unban_chat_member(message.chat.id, int(users["ids"][args[1]]))
    elif message.text.startswith("/mute"):
        if message.from_user.username in users['admins']:
            
            args = message.text.split(" ")
            try:
                if len(args) != 3:
                    raise ValueError()
                if args[1] == "vladtopordev":
                    bot.reply_to(message,"–Ø –Ω–µ –º–æ–∂—É –∑–∞–±–∞–Ω–∏—Ç—å —Å–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞...")
                    return
                bot.restrict_chat_member(message.chat.id, int(users["ids"][(args[1])]), until_date=time.time()+int(args[2]))
                bot.reply_to(message, f"–í–∏ –î–£–ñ–ï –î–£–ñ–ï –ñ–û–†–°–¢–û–ö–ê –ª—é–¥–∏–Ω–∞, –∑–∞–±–∞–Ω–∏–ª–∏ –Ω–µ–≤–∏–Ω—É –ª—é–¥–∏–Ω—É –∑ –Ω—ñ–∫–æ–º @{args[1]} –Ω–∞ {args[2]} —Å–µ–∫—É–Ω–¥!\nü§Æü§Æü§Æ")
            except ValueError:
                bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /mute username time\n–¥–µ username - —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ @\ntime - —á–∞—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, —è–∫—â–æ time –º–µ–Ω—à–µ 30, —Ç–æ –±–∞–Ω –±—É–¥–µ –Ω–∞–∑–∞–≤–∂–¥–∏")
            except KeyError:
                bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–ª—è —Ç–æ–≥–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —â–æ–± –≤—ñ–Ω —â–æ—Å—å –Ω–∞–ø–∏—Å–∞–≤ –ø–æ–∫–∏ –±–æ—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π")
        else:
            bot.reply_to(message, "–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
    elif message.text.startswith("/grant"):
        if message.from_user.username in users['admins']:
            bot.promote_chat_member(message.chat.id, message.from_user.id)
    elif message.text.startswith("/random "):
        args = message.text.split(" ")
        try:
            if args[1] == "user":
                bot.reply_to(message, f"–Ø –≤–∏–±–∏—Ä–∞—é: @{random.choice(list(users['ids'].keys()))}")
            elif args[1] == "yn":
                bot.reply_to(message, "–¢–∞–∫" if random.randint(1,2) == 1 else "–ù—ñ")
            elif args[1] == "int":
                bot.reply_to(message, f"–†–∞–Ω–¥–æ–º –∫–∞–∂–µ: {random.randint(int(args[2]),int(args[3]))}")
            else:
                raise ValueError()
        except:
            bot.reply_to(message, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è /random <int|yn|user> [num1] [num2]\nint - –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ num1 –¥–æ num2\nyn - —Ç–∞–∫ –∞–±–æ –Ω—ñ\nuser - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π —â–æ—Å—å –ø–∏—Å–∞–≤")
    elif message.text.startswith("/solve "):
        args = message.text.split(" ")
        for bad in ["os","import","bot","time","print"]:
            if bad in args[1]:
                return
        bot.reply_to(message,f"–ë—É–¥–µ: `{eval(args[1])}`")
    elif message.text.startswith("/text"):
        if True:
            file_info = bot.get_file(message.reply_to_message.voice.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(f'temp/{message.reply_to_message.voice.file_id}.ogg', 'wb') as new_file:
                new_file.write(downloaded_file)
                text = "Test"
            data, samplerate = sf.read(f'temp/{message.reply_to_message.voice.file_id}.ogg')
            sf.write('audio.wav', data, samplerate)
            # initialize the recognizer
            r = sr.Recognizer()
            with sr.AudioFile(f'audio.wav') as source:
                audio_data = r.record(source)
                text = r.recognize_google(audio_data, language="uk-UA")
                bot.reply_to(message.reply_to_message, text)
            #bot.reply_to(message, "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏, –í–∏ –º–∞—î—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é")
    elif message.text.startswith("/say "):
        args = message.text.split(" ")
        final = ""
        for i in range(2,len(args)):
            final += args[i] + " "
        os.system("rm voice.wav")
        print(final)
        os.system(f"espeak '{final}' -v {'zle/uk' if args[1] == 'ua' else 'zle/ru'} --stdout > voice.wav")
        audio = open('voice.wav', 'rb')
        bot.send_audio(message.chat.id, audio)
    elif message.text.startswith("/del"
    ):
        if message.from_user.username in users['admins']:
            bot.delete_message(message.chat.id, message.reply_to_message.id)
            bot.delete_message(message.chat.id, message.id)
    for ping in pings:
        if ping in message.text:
            bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time()+35)
            bot.delete_message(message.chat.id,message.id)
bot.infinity_polling()
